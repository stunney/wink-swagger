FORMAT: 1A

HOST: https://api.wink.com

# Wink API
The Wink API connects Wink devices to users, apps, each other, and the wider web.

NOTE: This is the documentation for the v1 version of the Wink API, originally published in 2013. The [v2 version of the API](http://docs.winkapiv2.apiary.io/) is much more powerful and extensible, but has breaking changes on this documentation. If you are a user of the original API but would like access to this version, please contact Wink Support to ask for a new set of credentials.

# Group A RESTful Service
The Wink API is a [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) service.

## Authentication
Nearly every request to the Wink API requires an OAuth bearer token.

Exceptions to this rule will be documented.

## Content types
Nearly every request to the Wink API should be expressed as JSON.

Nearly every response from the Wink API will be expressed as JSON.

Exceptions to this rule will be documented.

## HTTP verbs
The Wink API uses HTTP verbs in pretty standard ways:

- GET for retrieving information without side-effects
- PUT for updating existing resources, with partial-update semantics supported
- POST for creating new resources or blind upserts of existing resources
- DELETE for destructive operations on existing resurces

## Identifiers
All objects in the Wink API can be identified by `[object_type]_id`; the value of the `[object_type]` should be used to discern which kind of object you are dealing with.

The identifier is a string and not globally unique, currently. That is there can be a `'light_bulb_id':'abc'` and a `'thermostat_id':'abc'`

It is possible for the API to re-assign identifiers to resources to rebalance keys; in this case, your resource will still exist but it (and all references to it) will be updated to the new identifier.  Your application should be able to handle this case.

## Creatable vs. permanent
The term "creatable" will describe a resource which may be created and/or destroyed by the user.

The term "permanent" will describe a resource which may not be directly created or deleted by a user.

Note that permanent **does not imply** that the resource will always exist, just that the user may not create or destroy it.  Under no circumstances should you assume that a resource will always exist.

## Mutable vs. immutable
The term "mutable" will describe a resource or attribute which the user may modify at will, assuming the user has the necessary permissions to do so.

The term "immutable" will describe a resouce or attribute which may not be modified directly by the user.

Note that immutable **does not imply** that the resource or attribute will never change, just that the user may not directly change it.  Under no circumstances should you assume that a resource or attribute will always remain the same.

## Error states
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group OAuth
Authentication to the API

## Obtain access token [/oauth2/token]
### Sign in as user, or refresh user's expired access token [POST]

Note that unlike most other calls, this call does not require (and in fact should not use) an OAuth 2.0 bearer token.

+ Request Sign in as user (application/json)

        {
            "client_id": "consumer_key_goes_here",
            "client_secret": "consumer_secret_goes_here",
            "username": "user@example.com",
            "password": "password_goes_here",
            "grant_type": "password"
        }

+ Request Refresh expired access token (application/json)

        {
            "client_id": "consumer_key_goes_here",
            "client_secret": "consumer_secret_goes_here",
            "grant_type": "refresh_token",
            "refresh_token": "crazy_token_like_240qhn16hwrnga05euynaoeiyhw52_goes_here"
        }

+ Response 201 (application/json)

        {
            "data": {
                "access_token": "example_access_token_like_135fhn80w35hynainrsg0q824hyn",
                "refresh_token": "crazy_token_like_240qhn16hwrnga05euynaoeiyhw52_goes_here",
                "token_type": "bearer"
            }
        }



# Group Subscriptions

Real-time updates through the Wink API are managed by [PubNub](https://www.pubnub.com/)

**Subscriptions are organized around "topics"**

Subscriptions to topics fall into two categories: Lists and Objects.

List subscriptions send updates when an object is added or removed from the list. For example, a subscription to `/users/me/wink_devices` would trigger an update when a new device is added to a user account.

Object subscriptions send updates when an object is updated in any way. For example, a subscription to `/light_bulbs/abc` would trigger an update when a light bulb goes from powered off to powered on.
Several changes may be aggregated into a single broadcast, when the changes have happened in rapid succession.

To subscribe to a topic, find the subscription object inside the response from a GET request to either a list or an object.

        "subscription": {
            "pubnub": {
                "subscribe_key": "worghwihr0aijyp5ejhapethnpaethn",
                "channel": "w0y8hq03hy5naeorihnse05iyjse5yijsm"
            }
        }

# Group Device

**Common patterns and fields of Wink API Devices**

Specific fields, particularly in desired_state and last_reading will be outlined in the object-specific sections

Each Wink Device can have the following attributes, but not all attributes will be populated

Prepare to receive null for any one of these. For specific implementations, refer to the device documentation of the given device type.

|API field|Attributes|Description|
|----|----|----|
|name|(String, writable)|Name of the device, default given by server upon provisioning but can be updated by user|
|locale |(String, format LL_CC -- "en_us", "fr_fr")|Can be updated by user, but not exposed in the app, usually based of user's locale|
|units|(object, specific to device)|See Units|
|created_at|(long, timestamp, immutable)|Time device was added to account|
|subscription|(pubnub subscription object)|See Subscription|
|manufacturer_device_model|(String, assigned)|snaked case, unique device model|
|manufatcurer_device_id | (String, assigned | udid of third party device in third party system|
|hub_id|(String, assigned)|id of hub associated with device, only for devices with hub|
|local_id|(String, assigned)| id of device on hub, only for devices with hub|
|radio_type | (String, assigned)|currently only for devices with hub, available values "zigbee", "zwave", "lutron", "wink_project_one"|
|device_manufacturer|(String, assigned)|Human readable display string of manufacturer|
|lat_lng |(tuple of floats, writable)|location of device|
|location|(String, writable)|pretty printable location of device|
|desired_state|(object, values of requested state)| Depends on object type|
|last_reading|(object, values of last reading from device)| Depends on object type|
        
## Desired State and Last Reading [/{device_type}/{device_id}/desired_state]

The desired_state/last_reading paradigm is available in almost all wink devices. Fields in desired_state are what the client requests the state of the device to be, whereas fields in last_reading are what the API believes to be the current state of things. To keep requested changes distinct and distinguishable from real changes, each desired_state field has the following counterparts in last_reading

* `desired_foo`
* `desired_foo_updated_at`
* `foo`
* `foo_updated_at`
* `foo_changed_at` - this differs from update indicating when a reading was altered, in contrast to updated indicating the last time a reading was reported by a device

Throughout the rest of the documentation, writable states will only be documented under desired_state and read only states will be documented under last_reading

### Update desired state [PUT]

While you can update a device's desired state with a PUT to the whole device, you can also do a put of just the desired state to this endpoint

+ Request (application/json)

    + Body
    
            {
                "desired_state": {
                "powered": true
                }
            }

+ Response 200 (application/json)

    [Wink Devices][]

## Wink Devices [/users/me/wink_devices]

+ Model (application/json)

    JSON representation of a device

    + Body

            {
                "data":{
                    "light_bulb_id":"27105",
                    "locale":"Lighty Light",
                    "manufacturer_device_model":"ge_light_bulb",
                    "manufatcurer_device_id":"123456",
                    "hub_id":"rtyui",
                    "local_id":"5",
                    "radio_type":"zigbee",
                    "device_manufacturer":"GE",
                    "subscription": {
                        "pubnub": {
                            "subscribe_key": "worghwihr0aijyp5ejhapethnpaethn",
                            "channel": "w0y8hq03hy5naeorihnse05iyjse5yijsm"
                        }
                    }
                    "locale":"en_us",
                    "units":{
                    },
                    "lat_lng":[],
                    "desired_state":{},
                    "last_reading":{},
                    "created_at":1234567890,
                },
                "errors":[
                ],
                "pagination":{
                }
            }
            
### Retrieve All Devices of User [GET]

+ Response 200 (application/json)

    [Wink Devices][]
    
## Sharing device [/{device_type}/{device_id}/users]

**Certain users have permissions to share the device with other users.**

Only users with "manage_sharing" permissions can share a device, all other permissions are deprecated or underutilized at this time

+ Model (application/json)
    
    JSON representation of a shared user

    + Body

            {
                "device_id": "qs1ga9_1234deadbeef", //NOTE: the field name will vary depending on device
                "user_id": "abc123def-an15nag",
                "email": "user@example.com",
                "permissions": ["read_data", "write_data", "read_triggers", "write_triggers", "manage_sharing"]
            }

### List shared device users [GET]

+ Response 200 (application/json)

    [Sharing device][]


### Share a device [POST]

+ Request

          {
              "email": "user2@example2.com"
          }

+ Response 200 (application/json)

    [Sharing device][]

## Unshare a device [/{device_type}/{device_id}/users/{email}]

### Unshare a device [DELETE]

+ Response 204

## Air Conditioner [/air_conditioners/{device_id}]

### Get Air Conditioner [GET]

#### Air Conditioner Model Fields

|API field|Attributes|Description|
|----|----|----|
|air_conditioner_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|fan_speed|float|0 - 1|
|mode|string|"cool_only", "fan_only", "auto_eco"|
|powered|boolean|whether or not the unit is powered on
|max_set_point|float|temperature above which the unit should be cooling|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|temperature|float|maps to ambient temperature last read from device itself|
|consumption|float|total consumption in watts|

## Binary Switch [/binary_switches/{device_id}]

### Get Binary Switch [GET]

#### Binary Switch Model Fields

|API field|Attributes|Description|
|----|----|----|
|binary_switch_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|powered|boolean|whether device is powered on|
#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|

## Blind [/shades/{device_id}]

### Get Blind [GET]

#### Blind Model Fields

|API field|Attributes|Description|
|----|----|----|
|shade_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|position|float|0.0 is completely closed and 1.0 is completely open.|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|

## Camera [/cameras/{device_id}]

### Get Camera [GET]

#### Air Conditioner Model Fields

|API field|Attributes|Description|
|----|----|----|
|camera_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|capturing_video|boolean|Whether or not the camera is currently capturing video|
|capturing_audio|boolean|Whether or not the camera is currently capturing audio|
|mode|string|one of "armed", "disarmed", "privacy"

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|motion|Boolean|whether or not the dropcam currently detects movement|
|loudness|Boolean|whether or not the dropcam currently detects sound|
|connection|Boolean|whether or not the device is reachable remotely|

## Doorbell [/doorbells/{device_id}]

### Get Doorbell [GET]

#### Doorbell Model Fields

|API field|Attributes|Description|
|----|----|----|
|doorbell_id|string, assigned|API identifier|

#### Desired State Attributes
n/a

#### Last Reading Attributes

|API field|Data Type|Description|
|---|---|---|
|button_pressed|boolean|doorbell button pressed event|
|motion|boolean|motion detected by doorbell event|
|battery|float|battery status|
|connection|boolean|online or offline|

## Egg Minder [/eggtrays/{device_id}}

### Get Egg Minder [GET]

#### Eggtray Model Fields

|API field|Attributes|Description|
|----|----|----|
|eggtray_id|string, assigned|API identifier|
|freshness_period|(integer, mutable with write_data permission on eggtray device)|[Period during which eggs are defined as fresh in seconds]|
|eggs|(array of 14 integers, assigned, immutable)|[Timestamp in seconds of when each egg was added]|

            {
                "eggs": [
                    1377180085,
                    1377180086,
                    1377180087,
                    1377180088,
                    1377180089,
                    1377180090,
                    1377180091,
                    1377180092,
                    1377180093,
                    1377180094,
                    1377180095,
                    1377180096,
                    1377180097,
                    1377180098
                ],
                "freshness_period": 2419200
            }

#### Desired State Attributes
n/a

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|boolean|connection to server|
|battery|float|0.0 - 1.0 battery level|
|inventory|integer|# of eggs|
|freshness_remaining|integer|seconds until oldest egg goes bad|

## Garage Door [/garage_doors/{device_id}]

### Get Garage Door [GET]

#### Garage Door Model Fields

|API field|Attributes|Description|
|----|----|----|
|garage_door_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|position|float|0 - 1, *while a float, the app should only send up 0 or 1, for security*|
|laser|boolean|turn on/off laser|
|calibration_enabled|boolean|turn on/off calibration mode|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|buzzer|boolean|whether or not the buzzer is on|
|led|boolean|whether or not the LED is on|
|moving|boolean|whether or not the garage door is current moving|
|fault|boolean|whether or not there is an error with the garage door|
|disabled|boolean|whether remote control is disabled due to an error|
|error|array|string array of errors|
|control_enabled|boolean|whether or not the unit is capable of remote control|
|controller_error|array,string|errors from the controller unit,putting the garage door into state where remote control is disabled|
|tilt_sensor_error|array,string|whether the tilt sensor has a battery/in range or if that battery is low|

## Hub [/hubs/{device_id}]

### Get Hub [GET]

#### Hub Model Fields

|API field|Attributes|Description|
|----|----|----|
|hub_id|string, assigned|API identifier|

### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|pairing_mode|(string of radio to enter)|[zigbee, zwave, lutron, zwave_exclusion]|
|kidde_radio_code|(int, assigned, mutable)|[0 - 255, represent 8-bit radio frequency of Wink Hub to look for kidde smoke detector}|

### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|remote_pairable|boolean|whether or not a connected Lutron remote is ready for association|
|updating_firmware|boolean|whether the hub is currently updating its firmware|
|firmware_version|string|current hub firmware_version|
|mac_address|string|hub mac address|
|ip_address|string|ip address of hub|
|update_needed|boolean|whether or not the hub needs a firmware update|

## Light Bulb [/light_bulb/{device_id}]

### Get Light Bulb [GET]

#### Light Bulb Model Fields

|API field|Attributes|Description|
|----|----|----|
|light_bulb_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|powered|boolean|whether device is powered on|
|brightness|float|0.0 to 1.0, dimness level (binary_switch and light_bulb)|
|color_model|(string)|one of: "xy", "hsb", "color_temperature", or "rgb" |
|color_x|(float, precision 4)|the CIE 1931 coordinates of the bulb's color [0.0, 1.0]|
|color_y|(float, precision 6)|he CIE 1931 coordinates of the bulb's color [0.0, 1.0]|
|hue|(float, precision 6)|the 360-degree value of the bulb's color (normalized to 1.0)|
|saturation|(float, precision 6)|the percentage value of the bulb's saturation (normalized to 1.0) [0.0, 1.0]|
|color_temperature|(integer)|the Kelvin value of the bulb's color [2000 .. 6500]|
|color|(string)|the hexadecimal value of the bulb color (without a leading '#')|
|powering_mode|(string)|one of "dumb", "smart", "none" or null|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|

## Lock [/locks/{device_id}]

### Get Lock [GET]

#### Lock Model Fields

|API field|Attributes|Description|
|----|----|----|
|lock_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|locked|boolean|whether or not the lock is locked|
|alarm_mode|string|null, "activity", "tamper", "forced_entry"|
|alarm_sensitivity|float|ercentage 1.0 for Very sensitive, 0.2 for not sensitive, steps in values of 0.2|
|auto_lock_enabled|boolean|whether or not the auto lock feature is enabled|
|beeper_enabled|boolean|whether or not the beeper is enabled|
|vacation_mode|boolean|whether or not the vacation mode is enabled|
|key_code_length|integer| usually betweeen 4 and 8, check for capabilities for allowed units|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|alarm_activated|boolean|becomes true when alarm is triggered on lock|

## Nimbus [/cloud_clocks/{device_id}]

The Nimbus is an example of a legacy device whose fields and conventions do not follow the standard wink device semantics.

#### Device Model

|API field|Attributes|Description|
|----|----|----|
|cloud_clock_id|string, assigned|API identifier|
|dials|array of Dials|Array of 4 dial objects representing the dials on the Nimbus face|
|alarms|array of Alarms|0 to many alarms, sent to and stored on Nimbus firmware|

#### Dial Template

Returns the available channel_configurations and dial_configurations for the dial resource

Explanation of dial_configuration fields and values

|API Field|Description|
|----|----|
|scale_type|log, linear [How the dial should move in response to higher values|
|rotation|cw, ccw [In which direction the dial should rotate]|
|min_value|any number [The minimum data value the dial should attempt to display at min_position]|
|max_value|any number greater than min_value [The maximum data value the dial should attempt to display at max_position]|
|min_position|degree rotation which corresponds to min_value. Generally [0, 360] but not required to be so. [The position of the needle at min_value]|
|max_postition|degree rotation which corresponds to max_value. Generally [0, 360] but not required to be so. [The position of the needle at max_value]|

Read types available for each dial_template channel configuration:

|Read Type|Values|
|----|----|
|Time|n/a|
|Weather|temperature, weather_conditions|
|Traffic|travel_time, travel_conditions|
|Calendar|time_until, time_of [refers to next appointment on calendar, currently only Google Calendar is supported]|
|Email|unread_message_count [currently only Gmail is supported]|
|Facebook|friend_request_count, latest_comment_count, latest_like_count, unread_message_count, unread_notification_count|
|Twitter|latest_retweet_count, recent_mention_count, recent_direct_message_count|
|Instagram|latest_like_count, latest_comment_count|
|Fitbit|calorie_out_count, heart_rate, sleep_duration, step_count|
|Eggminder|inventory|
|Porkfolio|balance|

Other field values seen in dial_templates

|API Field|Description|
|----|----|
|timezone|any IANA timezone
|locale:|A standard locale string of the ll_cc format, where ll is the two letter ISO language code and cc is the two letter ISO country code|
|lat_lng|tuple of (lat, lng) for the Weather channel|
|location|location string (New York, NY) for display for the Weather channel|
|start_lat_lng|tuple of (lat, lng) for the Traffic channel|
|start_location|location string (New York, NY) for display for the Traffic channel|
|stop_lat_lng|tuple of (lat, lng) for the Traffic channel|
|stop_location|location string (New York, NY) for display for the Traffic channel|
|transit_mode|one of ["car", "ped", "bike", "transit"] representing desired principal mode of transit for the Traffic channel|


        {
            "dial_template_id": "4",
            "dial_configuration": {
                "min_value": 0,
                "max_value": 3600,
                "min_position": 0,
                "max_position": 360,
                "scale_type": "linear",
                "rotation": "cw"
            },
            "channel_configuration": {
                "channel_id": "4",
                "reading_type": "time_until",
            },
            "name": "Calendar"
        }

#### Dial model

Each cloud_clock resources have 4 dial resources. Use dial_template to retrieve possible values for channel_configuration and dial_configuration

**Atttributes**

|API field|Attributes|Description|
|----|----|----|
|dial_id|(string, assigned, immutable)|API Id|
|dial_index|(integer, assigned, mutable)|Index of dial on Nimbus object|
|name|(string, mutable with write_data permissions)|Clients don't expose naming ability and name will normally map to channel configuration|
|label|(string, assigned, mutable)|deprecated, use labels
|labels|(array, assigned, immutable)|values determined by channel type and value, for display on clock LCD)|
|position|(float, assigned, immutable)|[0.0 - 359.0, position of needle on display]|
|brightness|(integer, assigned, mutable)|[0 - 100, display brightness of LCD, can also be updated on clock by pressing down]|
|channel_configuration|(object)|(see dial_templates for possible values)
|dial_configuration|(object)|(see dial_templates for possible values)

            {
                "dial_id": "adsfljk_458",
                "dial_index": 2,
                "name": "Instagram",
                "label": "INSTAGRAM",
                "labels": ["INSTAGRAM", "1 LIKE"],
                "position": 180.0,
                "brightness": 25,
                "channel_configuration": {
                    "channel_id": "4323",
                    "linked_service_ids": ["125"],
                    "linked_service_types": ["instagram.read_messages"]
                    "reading_type": "latest_comment_count",
                    "locale": "en_us",
                },
                "dial_configuration": {
                    "scale_type": "linear",
                    "rotation": "cw",
                    "min_position": 0.0,
                    "min_value": 0.0,
                    "max_position": 0.0,
                    "max_value": 0.0,
                    "num_ticks": 0
                }
            }

Dials are be updated through the cloud_clock parent object

+ Model (application/json)

    JSON representation of a device

    + Body
    
            {
                "cloud_clock_id": "fasinfhs_12670s",
                "name": "My Nimbus",
                "dials": [
                    {
                        "dial_id": "456",
                        "dial_index": 0,
                        "name": "Facebook",
                        "label": "FACEBOOK",
                        "labels": ["FACEBOOK", "1 REQUEST"],
                        "position": 90.0,
                        "brightness": 25,
                        "channel_configuration": {
                            "channel_id": "6",
                            "linked_service_ids": ["123"],
                            "linked_service_types": ["facebook.read_messages"],
                            "reading_type":"friend_request_count",
                            "locale": "en_us"
                        },
                        "dial_configuration": {}
                    },
                    {
                        "dial_id": "457",
                        "dial_index": 1,
                        "name": "Twitter",
                        "label": "TWITTER",
                        "labels": ["TWITTER", "1 TWEET"],
                        "position": 270.0,
                        "brightness": 25,
                        "channel_configuration": {
                        "channel_id": "4322",
                            "linked_service_ids": ["124"],
                            "linked_service_types": ["twitter.read_messages"],
                            "reading_type": "latest_retweet_count",
                            "locale": "en_us",
                        },
                        "dial_configuration": {}
                    },
                    {
                        "dial_id": "458",
                        "dial_index": 2,
                        "labels": ["638.2 HRS", "TO DEST"],
                        "name": "Instagram",
                        "label": "INSTAGRAM",
                        "position": 180.0,
                        "brightness": 25,
                        "channel_configuration": {
                            "channel_id": "4323",
                            "linked_service_ids": ["125"],
                            "linked_service_types": ["instagram.read_messages"]
                            "reading_type": "latest_comment_count",
                            "locale": "en_us",
                        },
                        "dial_configuration": {}
                    },
                    {
                        "dial_id": "459",
                        "dial_index": 3,
                        "name": "Weather",
                        "label": "WEATHER",
                        "labels": ["FLURRIES", "TEMP 32"],
                        "position": 0.0,
                        "brightness": 25,
                        "channel_configuration": {
                            "lat_lng": [40.7517836, -74.0050807],
                            "reading_type": "weather_conditions",
                            "locale": "en_us",
                            "channel_id": "4324"
                        },
                        "dial_configuration": {}
                    }
                ],
                "alarms": [
                    {
                        "alarm_id": "555",
                        "name": "Wakie wakie",
                        "recurrence": "DTSTART:20130821T140000ZnRRULE:FREQ=DAILY",
                        "media_id": "666",
                        "enabled": true,
                        "next_at": 123456789.0
                    }
                ]
            }

### List nimbi [GET]

+ Response 200 (application/json)

    [Nimbus][]

## Nimbus Alarm [/cloud_clocks/{cloud_clock_id}/alarms]

The alarm resource has the following attributes:

|API field|Attributes|Description|
|----|----|----|
|alarm_id|(string, assigned, immutable)|api id
|cloud_clock_id|(string, assigned, immutable)|[id of associated cloud_clock]|
|name|(string, mutable with write_data permissions)|user defined name|
|recurrence|(string, mutable with write_data permission)|[Recurrence string in iCalendar format]|
|enabled|(boolean, mutable with write_data)|if the alarm is currently enabled|
|next_at|(float, assigned, immutable)| [time stamp of next alarm]|

+ Model

            {
                "alarm_id": "fadlkfh_124_hasd",
                "cloud_clock_id": "fasinfhs_12670s",
                "name": "Wakie wakie",
                "recurrence": "DTSTART;TZID=America/New_York:20130826T073000nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR",
                "enabled": true,
                "next_at": 123456789.0
            }
            
### List alarms of nimbus [GET]

+ Response 200 (application/json)

    [Nimbus Alarm][]
    
### Create an alarm [POST]

+ Response 200 (application/json)

    [Nimbus Alarm][]
    
## Alarm [/alarms/{alarm_id}]
    
### Edit an alarm [PUT]

+ Response 200 (application/json)

    [Nimbus Alarm][]
    
### Delete an alarm [DELETE]

+ Response 204

## Power Strip [/power_strips/{device_id}]

As a legacy device, the power strip is a bit unique. The device itself has no desired state or last reading, instead, it has an array of two outlet objects that have individual states.

### Get Power Strip [GET]

#### Power strip Model

|API Fields|Attributes|Description|
|----|----|----|
|power_strip_id|string, assigned|API identifier|
|outlets|array of two outlets|the two outlets of the powerstrip|

#### Power strip Last Reading

|API Fields|Attributes|Description|
|----|----|----|
|connection|boolean|whether or not the powerstrip is connected|

#### Outlet Model

|API Fields|Attributes|Description|
|----|----|----|
|outlet_id|string, assigned|API identifier|
|outlet_index|(numeric, assigned, immutable)|Order of outlet on power strip|

#### Outlet Desired State

|API Fields|Attributes|Description|
|----|----|----|
|powered|boolean|whether or not the outlet is on|

## Piggy Bank [/piggy_bank/{device_id}]

As a legacy device, the power strip is a bit unique. The deposits are a separate call outlined below. In addition, the color of the nose is not in the desired_state but on the object itself.

### Get Piggy Bank [GET]

#### Device Model

|API field|Attributes|Description|
|----|----|----|
|piggy_bank_id|string, assigned|API identifier|
|color|String|hex string of porkfolio nose color|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|battery|float|0 - 1 battery percentage|
|vibration|boolean|becomes true when accelerometer is triggered on movement|

### Deposits [/piggy_banks/{piggy_bank_id}/deposits?since={timestamp}]

#### Deposit Model

|API field|Attributes|Description|
|----|----|----|
|deposit_id|string|API id|
|created_at|timestamp|when deposit was created|
|amount|integer|deposit amount in cents|

Value can be negative for a withdrawal.

### Get all deposits for Piggy Bank [GET]

### Create a deposit or withdrawal [POST]

+ Request

        {
          "amount":10
        }
        
## Refrigerators [/refrigerators/{device_id}]

### Get Refrigerator [GET]

#### Refrigerator Model Fields

|API field|Attributes|Description|
|----|----|----|
|refrigerator_id|string, assigned|API identifier|

#### Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|refrigerator_set_point|float|set point for refrigerator in celsius|
|freezer_set_point|float|set point for freezer in celsius|
|refrigerator_ice_maker_enabled|boolean|whether or not the ice maker for the refrigerator is enabled|
|freezer_ice_maker_enabled|boolean|whether or not the ice maker for the freezer is enabled|
|sabbath_mode_enabled|boolean|whether or not sabbath mode is enabled|

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|min_refrigerator_set_point_allowed|float|minimum allowed set point in celsius|
|max_refrigerator_set_point_allowed|float|maximum allowed set point in celsius|
|min_freezer_set_point_allowed|float|minimum allowed set point in celsius|
|max_freezer_set_point_allowed|float|maximum allowed set point in celsius|
|refrigerator_left_door_ajar|boolean|whether the left refrigerator door is currently ajar|
|refrigerator_right_door_ajar|boolean|whether the right refrigerator door is currently ajar|
|refrigerator_door_ajar|boolean|whether either refrigerator door is currently ajar|
|freezer_door_ajar|boolean|whether the freezer door is currently ajar|
|water_filter_remaining|float|[0 - 1] percentage of water filter remaining|
|firmware_version|string|current firmware version of refrigerator unit|
|update_needed|boolean|whether refrigerator unit needs an update|
|updating_firmware|boolean|whether refrigerator unit is currently updating|
|symbiote_firmware_version|string|current firmware version of wifi module|
|symbiote_update_needed|boolean|whether wifi module needs an update|
|symbiote_updating_firmware|boolean|whether wifi module is currently updating|

## Refuel [/propane_tanks/{device_id}]

### Get Refuel [GET]

#### Refuel Model Fields

|API field|Attributes|Description|
|----|----|----|
|propane_tank_id|string, assigned|API identifier|

#### Device Attributes

|API field|Attributes|Description|
|----|----|----|
|tare|(float)|weight of tank, as printed on can|
|tank_changed_at|timestamp|time a new tank was added||

#### Desired State Attributes
n/a

#### Last Reading Attributes

|API field|Attributes|Description|
|----|----|----|
|connection|Boolean|whether or not the device is reachable remotely|
|battery|float|0 - 1, battery percentage|
|remaining|float|0 - 1, percent fuel remaining|

## Remote [/remotes/{device_id}]

### Get Remote [GET]

#### Remote Model Fields

|API field|Attributes|Description|
|----|----|----|
|remote_id|string, assigned|API identifier|

#### Desired State Attributes
n/a

#### Last Reading Attribute
|API field|Attributes|Description|
|----|----|----|
|remote_pairable|boolean|wehter or not the remote is pairing with a device|
|group_id|string|Reference to the Group object linked to the remote|
|button_up_pressed|boolean|up button is pressed|
|button_down_pressed|boolean|down button is pressed|
|button_on_pressed|boolean|on button is pressed|
|button_off_pressed|boolean|off button is pressed|

## Sensor [/sensor_pods/{device_id}]

### Get Sensor [GET]

#### Sensor Model Fields

|API field|Attributes|Description|
|----|----|----|
|sensor_pod_id|string, assigned|API identifier|

#### Desired State Attributes
n/a

#### Last Reading Attribute

|API Field|Attributes|Description|
|----|----|----|
|battery|float|[0 - 1] percentage of battery|
|connection|boolean|whether or not the sensor has connection|
|brightness|boolean|whether or not the sensor currently detects a large delta in light|
|external_power|boolean|whether the sensor is running on AC power or battery|
|humditity|float|[0 - 100] percentage of measured of humidity|
|loudness|boolean|whether the sensor is currently detects a large delta in sound|
|temperature|float|current reported temperature in celsius|
|vibration|boolean|whether the sensor currently detects a large delta in vibration|
|motion|boolean|whether the sensor currently detects a large delta in motion|
|opened|boolean|whether the sensor detects an opened state|
|locked|boolean|whether the sensor detects a locked state|
|liquid_detected|boolean|whether the sensor detects moisture|
|occupied|boolean|whether or not the sensor has detected occupancy in the last 30 minutes|

## Sirens [/sirens/{device_id}]

### Get Siren [GET]

#### Siren Model Fields

|API field|Attributes|Description|
|----|----|----|
|siren_id|string, assigned|API identifier|

#### Desired State Fields

|API Field|Attributes|Description|
|----|----|----|
|mode|String|one of [siren_only, strobe_only, siren_and_strobe]|
|powered|boolean|whether or not the siren is on|
|auto_shutoff|Integer|one of [null (never), 30, 60, 120]. Values are in seconds.|

#### Last Reading Attribute

|API Field|Attributes|Description|
|----|----|----|
|battery|float|[0 - 1] percentage of battery|
|connection|boolean|whether or not the sensor has connection|

## Smoke Alarm [/smoke_detector/{device_id}]

### Get Smoke Alarm [GET]

#### Smoke Alarm Model Fields

|API field|Attributes|Description|
|----|----|----|
|smoke_detector_id|string, assigned|API identifier|

#### Desired State Fields
n/a

#### Last Reading Fields

|API Field|Attributes|Description|
|----|----|----|
|smoke_detected|boolean|whether or not smoke is currently detected|
|co_detected|boolean|whether or not carbon monoxide is currently detected|
|test_activated|whether or not a test is currently activated|
|connection|boolean|current connection status|
|battery|float|[0 - 1] battery percentage|
|smoke_severity|float|[0 - 1] if present, severity of smoke detection|
|co_severity|float|[0 - 1] if present, severity of co detection|

## Sprinklers [/sprinklers/{device_id}]

### Get Sprinklers [GET]

The sprinkler model has an array of zones. The zone objects themselves just display the state of the zones. Control of the zones is on the the desired_state of the sprinkler object with the run_zones and run_zones_durations.

#### Sprinkler Model

|API Field|Attribute|Description|
|----|----|----|
|sprinkler_id|string, assigned|API identifier|
|zones|array of zones|Zones of sprinkler, which can display the state of the given nozzles|

#### Desired State Fields

|API Field|Attribute|Description|
|----|----|----|
|run_zones|array of integers|indices of zones to run|
|run_zones_durations|array of integer|duration in seconds of each of the run_zones|


#### Zone Model

|API Field|Attribute|Description|
|----|----|----|
|zone_id|string, assigned|API identifier|
|zone_index|integer|index of zone on sprinkler system|
|enabled|boolean|whether or not the zone is hooked up|

#### Zone Desired State

|API Field|Attribute|Description|
|----|----|----|
|shade|String|Shade state of vegetation in zone, one of ["none", "moderate", "mostly"]|
|nozzle|String|Nozzle type of zone, one of ["fixed_spray_head","drip", "manual_sprinkler", "rotary_head", "rotor_head"]|
|slope|String|Slope of vegetation in zone, one of ["bottom", "flat", "slope", "top"]|
|soil|String|Soil of vegetation in zone, one of ["clay", "sand", "silt", "top_soil"]|
|vegetation|String|Type of vegetation in zone, one of ["annuals","garden", "grass","perennials", "shrubs", "trees", "xeric", "xeriscape" ]|

#### Zone Last Reading

|API Field|Attribute|Description|
|----|----|----|
|powered|boolean|whether or not the zone is currently on, note this cannot be controlled on the zone level. It can only be set as an object in run_zones|

## Thermostats [/thermostats/{device_id}]

### Get Thermostat [GET]

#### Thermostat Model Fields

|API field|Attributes|Description|
|----|----|----|
|thermostat_id|string, assigned|API identifier|


#### Desired State Fields

|API Field|Attribute|Description|
|----|----|----|
|mode|String|One of ["cool_only", "heat_only", "auto", "aux"], allowed value depends in `mode.choices` in capabilities|
|powered|boolean|whether or not the hvac is on|
|max_set_point|float, in celsius|max set point for cooling in celsius|
|min_set_point|float, in celsius|min set point for heating in celsius|
|override_temperature|float, in celsius|temperature sent to thermostat to override interally read temperature|
|setpoint_increment_value|integer, in tenths of celsius|value that the thermostat will change on tapping|
|accelerometer_enable|boolean|whether or not temperature change on tapping is enabled|
|temperature_override_enable|boolean|whether or not overriding the temperature is enabled|
|fan_duration|integer|Set fan on for duration in seconds|
|users_away|boolean|Set users away -- thermostat will manage temperature at a lower set point|
|cooling_system_stage|String|one of "cool_stage_1", "cool_stage_2"|
|heating_system_stage|String|one of "heat_stage_1", "heat_stage_2"|
|heating_system_type|String|one of "conventional", "heat_pump"|
|heating_fuel_source|String|one of "electric", "gas"|
|humidifier_mode|String|one of "on", "off", "auto"|
|humidifier_set_point|float|[0.0 - 1.0]|
|fan_mode|String|one of "[on,auto]", auto will turn the fan on when heating or cooling is active|
|dehumidifier_mode|string|one of “[on,off]”|
|dehumidifier_set_point|float|the humidity degree in which the thermostat will start to dehumidify|
|dehumidify_overcool_offset|float|cool in x F below cool setpoint in order to reach the dehumidification setpoint, capabilities will express an array of choices from 0 to the equivalent of 5 degrees F in steps of 0.5 degrees F, converted to C|
|profile|string| one of “[home,away,sleep,awake,null]” depends on capabilities]
|fan_run_time|int|minimum amount of time to circulate air per hour when fan is on AUTO mode, 0-3300 seconds, increments of 300 seconds|

#### Last Reading Fields

|API Field|Attribute|Description|
|----|----|----|
|connection|boolean|whether or not the device is reachable remotely|
|temperature|float in celsius|[maps to room temperature last read from device itself]|
|smart_temperature|ecobee only, mean temp of all remote sensors and thermostat|
|humidity|float|[0-100] from device readings|
|external_temperature|float in celsius|the outdoor temperature/weather|
|max_max_set_point|float in celsius|highest allowed max set point|
|min_max_set_point|float in celsius|lowest allowed max set point|
|max_min_set_point|float in celsius|highest allowed min set point|
|min_min_set_point|float in celsius|lowest allowed min set point|
|has_fan|boolean|whether or not the thermostat unit has a fan|
|fan_timer_active|boolean|whether or not the fan timer is active|
|eco_target|boolean|whether or not the thermostat is running in an energy efficient mode|
|override_temperature_group_id|string|group id of group used to calculate temperature override|
|deadband|float in celsius|minimum difference between max and min set points|
|technician_name|String|contractor contact data|
|technician_phone|String|contractor contact data|
|aux_active|boolean|Auxiliary heat is actively pumping|
|cool_active|boolean|Cool is actively pumping|
|heat_active|boolean|Heat is actively pumping|
|fan_active|boolean|Fan is actively running|
|last_error|string|the current alert/warning on the thermostat|
|occupied|boolean|Whether or not the thermostat has detected occupancy in the last 30 minutes|

## Water Heaters [/water_heaters/{device_id}]

### Get Water Heater [GET]

#### Water Heater Model Fields

|API field|Attributes|Description|
|----|----|----|
|water_heater_id|string, assigned|API identifier|

#### Desired State Attributes

|API Field|Attribute|Description|
|----|----|----|
|mode|String|one of "eco", "performance", "heat_pump", "high_demand", "electric_only", "gas"|
|powered|boolean|whether or not the water heater is on|
|set_point|float|set point in celsius|
|vacation_mode|boolean|whether vacation mode is ucrrently enabled|

#### Last Reading Attributes

|API Field|Attribute|Description|
|---|---|---|
|min_set_point_allowed|float|minimum set point allowed in celsius|
|max_set_point_allowed|float|maximum set point allowed in celsius|
|modes_allowed|String array|one or many of modes, depends on rheem type|
|scald_message|String|Populated if the set point is above 120F|
|rheem_type|(String)|one of "Electric Water Heater", "Heat Pump Water Heater", "Gas Water Heater"|

# Group Member

Members are used throughout the API for group hetereogenous devices in scenes, groups and robots. There are no specific endpoints for members and their creation and updating will happen within their respective parents

## Member model

Members have the following attributes

|API field|Attributes|Description|
|----|----|----|
|object_id|(string, assignable)|API id|
|object_type|(string, assignable)|value will be singular types of wink devices and objects. i.e. air_conditioner, propane_tank, outlet, light_bulb, etc.|
|desired_state|(object)|current or requested desired_state of object|

# Group Group

**Resources for creating and controlling groups of devices**
 
The group resource is a representation of a group of wink devices which may be controlled simultaneously. In addition, the group will have an aggregated reading to get the aggregate state of the grouped devices.

The Wink API defines certain special groups which you cannot fully control.  These include, but are not limited to:

 - System categories such as `.all` and `.sensors`, which will include respectively every product and every product which is contains environment sensors of any kind.  You cannot create, delete, or rename system categories.  You cannot add or remove objects from system categories.  System categories have an `automation_mode` flag of `system_category`.
 - User categories such as `@door_sensors` and `@power`.  Some devices will appear in these categories by default, based on our best guess of how these devices will be used by most consumers.  You cannot create, delete, or rename user categories.  You can, however, add and remove objects, if our default classifications are not appropriate.  User categories have an an `automation_mode` flag of `user_category`.


The group resource has the following attributes:

|API field|Attributes|Description|
|---|---|---|
|group_id|string, assigned|API identifier|
|name|(string, mutable)|User defined name. *NOTE* system_category and user_category names are immutable. In addition, an error will be thrown if a user tries to name their group the same name as a category group|
|members|(0 to many objects, assignable)|[Member object](/General/API/Member)|
|automation_mode|(string, assigned, immutable)|system_category or user_category, also indicated by a prefix of `.` or `@`|
|reading_aggregation|(object)|aggregated last_reading of group devices|
|desired_state|(object)|desired state PUT to change all members simultaneously|


Optional member attributes:
|blacklisted_readings|(array of strings, assignable)|Once set, this member will not contribute to the group aggregation of blacklisted readings|

#### Reading Aggregation Model

Reading aggregation differ from last_reading in that the fields identify a count of state or an average/max/min

**Boolean Aggregation**

A boolean aggregation has the following fields

|API field|Attributes|Description|
|----|----|----|
|updated_at|(timestamp|Last time aggregation was updated|
|or|(boolean)|Whether the aggregation is driven by OR logic|
|and|(boolean)|Whether the aggregation is driven by AND logic|
|true_count|(integer)|How many members in the group are registering the given boolean field as true|
|false_count|(integer)|How many members in the group are registering the given boolean field as false|

**Numeric Aggregation**

A numeric aggregation has the following fields

|API field|Attributes|Description|
|----|----|----|
|updated_at|(timestamp|Last time aggregation was updated|
|min|(float)|Lowest reading of members|
|max|(float)|Highest reading of members|
|average|(float)|Average reading of all members, currently unweighted|

## Groups [/users/me/groups]

+ Model (application/json)
    
    JSON representation of a shared group

    + Body

            {
                "object_id": "agh1ity-876f00",
                "object_type": "group",
                "name": "Front windows",
                "members": [
                    {
                        "object_id": "adsjfhasdof",
                        "object_type": "light_bulb"
                        "desired_state": {
                            "powered":true
                        },
                        "blacklisted_readings": ['brightness']
                    },
                    {
                        "object_id": "adsjfhasdof",
                        "object_type": "air_conditioner",
                        "desired_state": {
                            "powered":true
                        },
                        "blacklisted_readings": []
                    }],
                "desired_state":{},
                "reading_aggregation": {
                    "powered": {
                        "updated_at":1234567890,
                        "or":false,
                        "and":true,
                        "true_count":2,
                        "false_count":0
                    }
                }
            }
            
### Get all groups [GET]

+ Response 200 (application/json)

    [Groups][]

### Create a group [POST]

+ Request

           {
                "name": "Front windows",
                "members": [
                    {
                        "object_id": "adsjfhasdof",
                        "object_type": "light_bulb"
                        "desired_state": {
                            "powered":true
                        },
                        "blacklisted_readings": ['brightness']
                    },
                    {
                        "object_id": "adsjfhasdof",
                        "object_type": "air_conditioner",
                        "desired_state": {
                            "powered":true
                        },
                        "blacklisted_readings": []
                    }],
            }

+ Response 200 (application/json)

    [Groups][]

## Group [/groups/{group_id}/]

### Retrieve a group [GET]

+ Response 200 (application/json)

    [Groups][]

### Update group settings [PUT]

+ Request

           {
                "name": "Front windows",
            }

+ Response 200 (application/json)

    [Groups][]

### Delete a group [DELETE]

+ Response 204

## Set state of group [/groups/{group_id}/activate]

When you post up a desired state object, the API will then change all the devices in the group to that desired state. Allowed values for desired_state are dependent on the devices in the group and you should refer to individual device documentation.

If you have multiple types of devices in a group and a field in the desired_state object only applies to some of them, such as `color` for `light_bulb` types, the API will update the appropriate devices and ignore that state for devices that do not have a color state, such as air_conditioners

### Set state [POST]

+ Body
            {
                "desired_state": {
                    "powered":true
                }
            }

+ Response 200 (application/json)

    [Groups][]
    
# Group Scene

A scene is a collection of desired states for any supported Wink device (such as an air conditioner or garage door) or any Wink object (such as the outlet on a powerstrip). The scene members can be heterogenous and the member objects are composed as defined above in member.
A scene member must have a valid desired state for the object type in order to be valid. 

## Scene Model

|API field|Attributes|Description|
|----|----|----|
|scene_id|string, assigned|API identifier|
|name|(string, writable)|User defined name|
|members|array of members|See Member above|

## Scenes [/users/me/scenes]

+ Model (application/json)

        JSON representation of a shared group

            + Body
    
            {
              "scene_id": "qs1ga9_1234deadbeef",
              "name": "Coming home",
              "members": [
                  {
                      "object_id":"afdjlafd",
                      "object_type:"light_bulb",
                      "desired_state": {
                          "powered": true
                      }
                  },
                  {
                      "object_id":"yasdfkha",
                      "object_type:"garage_door",
                      "desired_state": {
                          "position": 1.0
                      }
                  }
              ]
            }
### Get all scenes [GET]

+ Response 200 (application/json)

    [Scenes][]

### Create a scene [POST]

+ Request

           {
                "name": "Coming home",
                "members": [
                    {
                        "object_id":"afdjlafd",
                        "object_type:"light_bulb",
                        "desired_state": {
                            "powered": true
                        }
                  },
                  {
                      "object_id":"yasdfkha",
                      "object_type:"garage_door",
                      "desired_state": {
                          "position": 1.0
                      }
                  }
                ]
            }

+ Response 200 (application/json)

    [Scenes][]

## Scene [/scenes/{scene_id}/]

### Retrieve a scene [GET]

+ Response 200 (application/json)

    [Scenes][]

### Update scene settings [PUT]

+ Request

           {
                "name": "Coming home",
            }

+ Response 200 (application/json)

    [Scenes][]

### Delete a scene [DELETE]

+ Response 204

## Set state of scene [/scenes/{scene_id}/activate]

In order to activate the scene, POST to the endpoint. No body is necessary.

### Set state [POST]

+ Response 200 (application/json)

    [Scenes][]
    
            
# Group Robot

A Robot is the API object that allows for automations based on external triggers such as time or another device's state

## Robot Model

|API field|Attributes|Description|
|----|----|----|
|robot_id|string, assigned|API identifier|
|name|(string, writable)|User defined name|
|creating_actor_type|(string, assigned)|type of entity that created the robot, can be user or device in case of smart features|
|creating_actor_id|(string, assigned)|id of entity that created the robot|
|automation_mode|(string, writable)|mode of robot if generated for smart features, current possible values -- null (not smart), "smart_schedule", "smart_away_arriving", "smart_away_departing"; client writable values "notification" (fridge note), "tapt" (created implicitly through relay or tapt interface)|
|causes|(array, 1 to many Conditions)| Cause(s) that will trigger the robot|
|restrictions|(0 to many Conditions)| Restriction(s) that would prevent the robot from triggering on the given causes. **NOTE** while documented, currently this is not exposed on the clients|
|effects|(array, 1 to many|Effect of robot when triggered|
|enabled|(boolean, writable)|Whether or not the robot is currently enabled|
|fired_limit|(integer, writable)|How many times the robot can fire. A value of null or 0 means the robot can fire as many times as possible. Currently used by Refrigerator note robots|
|last_fired|(timestamp)|Last time the robot fired|

## Condition Model

The causes array is an array of Conditions that can trigger a robot. The restrictions array is an array of Conditions that can prevent a robot from being fired, even if it is triggered by a cause.

A condition has the following format:

|API field|Attributs|Description|
|----|----|----|
|condition_id|(string, assigned, immutable)|id of condition|
|observed_field|(string, writable)|field in last reading|
|observed_object_id|(string, writable)|id of object being observed|
|observed_object_type|(string, writable)|type of object being observed, ex. "garage_door"|
|operator|(string, writable)|comparison operator|
|value|(string, writable)|desired value of observed_field|
|recurrence|(text, writeable)|iCal string|
|restriction_join|(string, writable)|"and" or "or"|
|robot_id|(integer, writable)|id of robot|
|restricted_object_id|(integer, writable)|if this condition is restricting something, the id of what is being restricted|
|restricted_object_type|(string, writable)|if this condition is restricting something, the type of what is being restricted, currently "robot" or "condition"|
|restrictions|(array of 0 to many)|embedded condition objects to restrict parent condition|

For causes and restrictions, their truthiness is evaluated in the following order:

- `recurrence && observed_field && restrictions.`

### Condition recurrence

Recurrence should be a string in iCal format and is to be used for a condition dependent on a time. If the recurrence is nil, it's evaluation is true. Thus, to omit a time restriction, set the recurrence string to null. If the recurrence is meant to restrict time for firing, it should have a start and end. See below for examples.

+ It is 5 pm on a Tuesday

        {
            "recurrence": "DTSTART;TZID=PDT:20140313T170000nRRULE:FREQ=DAILY"
        }

+ It is between 8pm and 10pm on Tuesdays

        {
            "recurrence": "DTSTART;TZID=PDT:20140313T200000nDTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
        }

+ Every day at sunrise in my current location

        {
            "recurrence": "DTSTART;TZID=PDT:20140313T080000nX-WINK-STSTART:sunrise;37.47;-122.25nDTEND;TZID=PDT:20140314T080000nRRULE:FREQ=DAILY"
        }

+ Every day at sunset in my current location

        {
            "recurrence": "DTSTART;TZID=PDT:20140313T200000nX-WINK-STSTART:sunset;37.47;-122.25nDTEND;TZID=PDT:20140314T200000nRRULE:FREQ=DAILY"
        }

+ Every day between sunrise and sunset in my current location

        {
            "recurrence": "DTSTART;TZID=PDT:20140313T200000nX-WINK-STSTART:sunrise;37.47;-122.25nDTEND;TZID=PDT:20140314T210000nRX-WINK-STEND:sunset;37.47;-122.25nRULE:FREQ=DAILY"
        }

### Condition observed fields

The following fields are all required to properly evaluate observed_field

- observed_field
- operator
- value

observed_field can be any field in a device's last_reading object

operator can be only of the following, as strings

- ==
- !=
- >
- <
- >=
- <=

value is the value that will be used in comparison with the operator.

**NOTE:** although you can compare multiple types of values, such as boolean, string, int, or float, this value should be put and read as a string. See examples below.

In order to evaluate to true, the observed field's value must be evaluated to true with the given operator

+ Example of a condition: a garage door is opened by at least 50%

        {
            "observed_object_id":"xyzasdfadsfhkj",
            "observed_object_type":"garage_door",
            "observed_field": "position",
            "operator": ">=",
            "value": "0.5"
        }

+ Example of a condition: geo fence is entered

        {
            "observed_object_id":"defasdfkjha",
            "observed_object_type":"geofence",
            "observed_field": "within",
            "operator": "==",
            "value": "true"
        }

+ Example of a condition: geo fence is exited

        {
            "observed_object_id":"defasdfkjha",
            "observed_object_type":"geofence",
            "observed_field": "within",
            "operator": "==",
            "value": "false"
        }


#### Restriction Evaluation

Each condition can have embedded restrictions to create complex logic.

By default, each restriction in the array is joined by "and" so that all the restrictions in the array must evaluate to true in order for restrictions to evaluate to true.

You can join restrictions by "or" by add  a

- restriction_join [allowed values "and" "or"]

**NOTE ABOUT COMPLEXITY**

Because each restriction is of the same class as the top level Condition, each embedded restriction goes through the same evaluation process for truthiness and can similarly have embedded restrictions of its own.

The restrictions defined in the top level "restrictions" array of the robot object are joined by "and". From there, nested restrictions are joined based on the "restriction_join" field of the parent restriction.

The allowed causes are either objects with an observed reading (such as a garage door opening or a geofence being triggered) or they are a time as defined by an iCal recurrence string.

EXAMPLES:

Note: each example could be in the causes or restrictions array on the robot object, causes are conditions that can trigger a robot and restrictions are conditions that can prevent a robot from being triggered.


+ The garage door is closed and I am within my home geofence

          {
              "restrictions": [
                  {
                      "observed_object_id":"xyzasdfadsfhkj",
                      "observed_object_type":"garage_door",
                      "observed_field": "position",
                      "operator": "==",
                      "value": "0.0"
                  },
                  {
                      "observed_object_id":"defasdfkjha",
                      "observed_object_type":"geofence",
                      "observed_field": "within",
                      "operator": "==",
                      "value": "true"
                  }
              ]
          }

+ (the garage door is closed and I am within my home geofence) or it is between 8pm and 10pm on Tuesdays

        {
            "restriction_join": "or"
            "restrictions": [
                {
                    "restrictions": [
                        {
                            "observed_object_id":"xyzasdfadsfhkj",
                            "observed_object_type":"garage_door",
                            "observed_field": "position",
                            "operator": "==",
                            "value": "0.0"
                        },
                        {
                            "observed_object_id":"defasdfkjha",
                            "observed_object_type":"geofence",
                            "observed_field": "within",
                            "operator": "==",
                            "value": "true"
                        }
                    ]
                },
                {
                    "recurrence": "DTSTART;TZID=PDT:20140313T200000DTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
                }
            ]
        }

+ The garage door is closed and (I am within my home geofence or it is between 8pm and 10pm on Tuesdays)

        {
            "restrictions": [
                {
                    "observed_object_id":"xyzasdfadsfhkj",
                    "observed_object_type":"garage_door",
                    "observed_field": "position",
                    "operator": "==",
                    "value": "0.0"
                },
                {
                    "join_type": "or",
                    "restrictions": [

                        {
                            "observed_object_id":"defasdfkjha",
                            "observed_object_type":"geofence",
                            "observed_field": "within",
                            "operator": "==",
                            "value": "true"
                        },
                        {
                            "recurrence": "DTSTART;TZID=PDT:20140313T200000DTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
                        }
                    ]
                },

            ]
        }

+ The garage door is closed and it is between 8pm and 10pm on Tuesdays

Can be written as two embedded restrictions

        {
            "restrictions": [
                {
                    "observed_object_id":"xyzasdfadsfhkj",
                    "observed_object_type":"garage_door",
                    "observed_field": "position",
                    "operator": "==",
                    "value": "0.0"
                },
                {
                    "recurrence": "DTSTART;TZID=PDT:20140313T200000DTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
                }

            ]
        }

## Effect Model

An effect is what happens if any of the causes occur outside of the optional restriction.

The effect has the following attributes:

|API field|Attributs|Description|
|----|----|----|
|scene|(refers to scene that would be activated)|If the effect affects devices, a scene will be created|
|recipient_actor_id |(String)|Refers to a user that would get a notification of some type. Scenes and recipient actors are currently mutually exclusive|
|recipient_actor_type|(String)|Refers to the type of actor, currently just "user". Scenes and recipient actors are currently mutually exclusive|
|notification_type|(String)|notification type to send "email" or "push"|
|note|(custom text object)|used in refrigerator notes|

An effect can have a scene OR a recipient_actor_id and notification_type, but should not have both.

If an effect has a note, it should also have a notification_type and recipient_actor.

**SCENE IN EFFECT**

The scene object is saved within the system and has a scene_id, but will come down as a full object for ease of use

**USER and NOTIFICATION_TYPE**

recipient_actor_id is the user_id of the user who will be receiving the notification

recipient_actor_type should be "user"

Allowed values for notification_type are "email" and "push"

## Custom Text Model
The custom text resource allows users to associate arbitrary text with another resource.

Currently a custom text is only able to be associated with an effect.

The custom text has the following attributes:

|API field|Attributes|Description|
|----|----|----|
|custom_text_id|(string, assigned, immutable)|API id|
|body|(string, writable, mutable)|String used as the message of the custom text|
|subject_id|(string, assigned, immutable)|Assigned, referencing effect that has the custom text|
|subject_type|(string, assigned, immutable)|Assigned, referencing effect that has the custom text|


+ Model

        {
            "custom_text_id": "1",
            "body": "Some custom text",
            "subject_id": "34",
            "subject_type": "effect"
        }

## Robots [/users/me/robots]

+ Model (application/json)
    
            JSON representation of a shared group
    
            + Body
                    
                    {
                        "name": "Data",
                        "creating_actor_type": "user",
                        "creating_actor_id": "asdfljafd",
                        "automation_mode": null,
                        "causes" : [
                            {
                                "condition_id": "qweryoiu",
                                "observed_object_id":"xyzasdfadsfhkj",
                                "observed_object_type":"garage_door",
                                "observed_field": "position",
                                "operator": "==",
                                "value": "0.0"
                            }
                        ],
                        "restrictions" : [
                            {
                                "condition_id": "sadfdsaafsd",
                                "recurrence": "DTSTART;TZID=PDT:20140313T200000DTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
                            }
                        ],
                        "effects": [
                            {
                                "scene": {
                                    "scene_id": "asdaioytf",
                                    "name":"Data Scene",
                                    "members": [
                                        "object_id":"asdfoaiye",
                                        "object_type":"light_bulb",
                                        "desired_state": {
                                            "powered":true,
                                            "brightness": 0.75
                                        }
                                    ]
                                },
                                "note": {
                                  "custom_text_id",
                                  "body": "Some text",
                                  "subject_id": "abc",
                                  "subject_type": "effect"
                                }
                            },
                            {
                                "recipient_actor_id": "adsfhkjasdfy",
                                "recipient_actor_type": "user",
                                "notification_type": "email
                            }
                        ],
                        "last_reading": {
                            "enabled":true,
                            "fired_limit":2
                        }
                    }
    
### Get all robots [GET]

+ Response 200 (application/json)

    [Robots][]

### Create a robot [POST]

+ Request

           {
                    "name": "Data",
                    "fired_limit": 2,
                    "automation_mode": null,
                    "causes" : [
                        {
                            "observed_object_id":"xyzasdfadsfhkj",
                            "observed_object_type":"garage_door",
                            "observed_field": "position",
                            "operator": "==",
                            "value": "0.0"
                        }
                    ],
                    "restrictions" : [
                        {
                            "recurrence": "DTSTART;TZID=PDT:20140313T200000DTEND;TZID=PDT:20140313T220000nRRULE:FREQ=DAILY"
                        }
                    ],
                    "effects": [
                        {
                            "scene": {
                                "name":"Data Scene",
                                "members": [
                                    "object_id":"asdfoaiye",
                                    "object_type":"light_bulb",
                                    "desired_state": {
                                        "powered":true,
                                        "brightness": 0.75
                                    }
                                ]
                            },
                            "note": {
                              "custom_text_id",
                              "body": "Some text",
                              "subject_id": "abc",
                              "subject_type": "effect"
                            }
                        },
                        {
                            "recipient_actor_id": "adsfhkjasdfy",
                            "recipient_actor_type": "user",
                            "notification_type": "email
                        }
                    ],
                    "desired_state": {
                        "enabled":true,
                        "fired_limit":2
                    }
                }

+ Response 200 (application/json)

    [Robots][]

## Robot [/robots/{robot_id}/]

### Retrieve a robot [GET]

+ Response 200 (application/json)

    [Robots][]

### Update robot settings [PUT]

+ Request

           {
                "name": "Data",
            }

+ Response 200 (application/json)

    [Robots][]

### Delete a robot [DELETE]

+ Response 204

# Group User
Resources for Users

## User Model

|API field|Attributes|Description|
|----|----|----|
|email|(string, writable, mutable)|user's email|
|first_name|(string, writable, mutable)|user's first name|
|last_name| (string, writable, mutable)| user's last name|
|oauth2|(object, assigned, mutable)| oauth 2 object for authentication|
|locale|(string, writable, mutable)|ISO locale|
|tos_accepted|(boolean, assigned, mutable)|whether or not the current TOS has been accepted|
|confirmed|(boolean, assigned, mutable)|whether or not the user has confirmed their email|

## Desired State Attributes

|API field|Attributes|Description|
|----|----|----|
|units|object|display units for user|

## User [/users]

### Create user [POST]
+ Request (application/json)

    + Body

            {
                "client_id": "...",
                "client_secret": "...",
                "email": "user@example.com",
                "first_name": "User",
                "last_name": "McUserson",
                "locale": "en_us",
                "new_password": "********"
            }

+ Response 201 (application/json)

        {
            "user_id": "27412",
            "first_name": "User",
            "last_name": "McUserson",
            "email": "user@example.com",
            "oauth2": {
              "access_token": "example_access_token_like_135fhn80w35hynainrsg0q824hyn",
              "refresh_token": "...",
              "token_type": "bearer",
              "token_endpoint": "https://winkapi.quirky.com/oauth2/token"
            },
            "locale": "en_us",
            "units": {},
            "tos_accepted": false,
            "confirmed": false
        }


## User [/users/{user_id}]

+ Model (application/json)

    JSON representation of an user

    + Body

            {
                "data":{
                    "user_id":"27105",
                    "first_name":"User",
                    "last_name":"McUserson",
                    "email":"user@example.com",
                    "oauth2":{
                        "access_token":"55bb2ce8488d7ff9313be76668a43ea0",
                        "refresh_token":"d30d2dcf5f33411b7a225e9e63952d84",
                        "token_type":"bearer",
                        "token_endpoint":"http://localhost:3000/oauth2/token"
                    },
                    "locale":"en_us",
                    "units":{
                    },
                    "tos_accepted":false
                },
                "errors":[
                ],
                "pagination":{
                }
            }

+ Parameters
    - user_id (required, string, `21212`) ... String `user_id` of the user to perform action on. Has example value.

### Update current user's profile [PUT]
+ Request (application/json)

    + Headers

            Authorization : Bearer example_access_token_like_135fhn80w35hynainrsg0q824hyn

    + Body

            {
                "email": "user@example.com",
            }

+ Response 200 (application/json)

        {
            "data": {
                "user_id": "abc123def-an15nag",
                "email": "user@example.com"
            }
        }
        
## User password [/users/{user_id}/update_password]

### update password [POST]
+ Request (application/json)

    + Headers

            Authorization : Bearer example_access_token_like_135fhn80w35hynainrsg0q824hyn

    + Body

            {
                "old_password" : '123456'
                "new_password" : '654321'
            }

+ Response 200 (application/json)

        {}




